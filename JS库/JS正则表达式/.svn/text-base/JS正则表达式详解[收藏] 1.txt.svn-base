JS的正则表达式

//校验是否全由数字组成


代码
function isDigit(s)   
{   
var patrn=/^[0-9]{1,20}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
//校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串


代码
function isRegisterUserName(s)   
{   
var patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
//校验用户姓名：只能输入1-30个以字母开头的字串


代码
function isTrueName(s)   
{   
var patrn=/^[a-zA-Z]{1,30}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
}}   
  
//校验密码：只能输入6-20个字母、数字、下划线   
[code]   
function isPasswd(s)   
{   
var patrn=/^(\w){6,20}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
//校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”


代码
function isTel(s)   
{   
//var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?(\d){1,12})+$/;   
var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/;   
if (!patrn.exec(s)) return false  
return true  
}   
//校验手机号码：必须以数字开头，除数字外，可含有“-”


代码
function isMobil(s)   
{   
var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/;   
if (!patrn.exec(s)) return false  
return true  
}   
//校验邮政编码


代码
function isPostalCode(s)   
{   
//var patrn=/^[a-zA-Z0-9]{3,12}$/;   
var patrn=/^[a-zA-Z0-9 ]{3,12}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
//校验搜索关键字


代码
function isSearch(s)   
{   
var patrn=/^[^`~!@#$%^&*()+=|\\\][\]\{\}:;'\,.<>/?]{1}[^`~!@$%^&()+=|\\\]  
[\]\{\}:;'\,.<>?]{0,19}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
  
function isIP(s) //by zergling   
{   
var patrn=/^[0-9.]{1,20}$/;   
if (!patrn.exec(s)) return false  
return true  
}   
正则表达式


代码
"^\\d+$"　　//非负整数（正整数 + 0）   
"^[0-9]*[1-9][0-9]*$"　　//正整数    
"^((-\\d+)|(0+))$"　　//非正整数（负整数 + 0）    
"^-[0-9]*[1-9][0-9]*$"　　//负整数    
"^-?\\d+$"　　　　//整数    
"^\\d+(\\.\\d+)?$"　　//非负浮点数（正浮点数 + 0）    
"^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$"　   
//正浮点数    
"^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$"　　//非正浮点数（负浮点数 + 0）    
"^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"　   
//负浮点数    
"^(-?\\d+)(\\.\\d+)?$"　　//浮点数    
"^[A-Za-z]+$"　　//由26个英文字母组成的字符串    
"^[A-Z]+$"　　//由26个英文字母的大写组成的字符串    
"^[a-z]+$"　　//由26个英文字母的小写组成的字符串    
"^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串    
"^\\w+$"　　//由数字、26个英文字母或者下划线组成的字符串    
"^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$"　　　　//email地址    
"^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$"　　//url   
"^[A-Za-z0-9_]*$"  
正则表达式使用详解

简介

简单的说，正则表达式是一种可以用于模式匹配和替换的强有力的工具。其作用如下：
测试字符串的某个模式。例如，可以对一个输入字符串进行测试，看在该字符串是否存在一个电话号码模式或一个信用卡号码模式。这称为数据有效性验证。
替换文本。可以在文档中使用一个正则表达式来标识特定文字，然后可以全部将其删除，或者替换为别的文字。
根据模式匹配从字符串中提取一个子字符串。可以用来在文本或输入字段中查找特定文字。

基本语法

在对正则表达式的功能和作用有了初步的了解之后，我们就来具体看一下正则表达式的语法格式。
正则表达式的形式一般如下：　　

/love/　　其中位于“/”定界符之间的部分就是将要在目标对象中进行匹配的模式。用户只要把希望查找匹配对象的模式内容放入“/”定界符之间即可。为了能够使用户更加灵活的定制模式内容，正则表达式提供了专门的“元字符”。所谓元字符就是指那些在正则表达式中具有特殊意义的专用字符，可以用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式。
较为常用的元字符包括： “+”， “*”，以及 “?”。

“+”元字符规定其前导字符必须在目标对象中连续出现一次或多次。

“*”元字符规定其前导字符必须在目标对象中出现零次或连续多次。

“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次。

下面，就让我们来看一下正则表达式元字符的具体应用。

/fo+/　　因为上述正则表达式中包含“+”元字符，表示可以与目标对象中的 “fool”, “fo”, 或者 “football”等在字母f后面连续出现一个或多个字母o的字符串相匹配。

/eg*/　　因为上述正则表达式中包含“*”元字符，表示可以与目标对象中的 “easy”, “ego”, 或者 “egg”等在字母e后面连续出现零个或多个字母g的字符串相匹配。

/Wil?/　　因为上述正则表达式中包含“？”元字符，表示可以与目标对象中的 “Win”, 或者“Wilson”,等在字母i后面连续出现零个或一个字母l的字符串相匹配。

有时候不知道要匹配多少字符。为了能适应这种不确定性，正则表达式支持限定符的概念。这些限定符可以指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。

{n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。

{n,} n 是一个非负整数。至少匹配 n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。

{n,m} m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。

除了元字符之外，用户还可以精确指定模式在匹配对象中出现的频率。例如，/jim {2,6}/ 上述正则表达式规定字符m可以在匹配对象中连续出现2-6次，因此，上述正则表达式可以同jimmy或jimmmmmy等字符串相匹配。
在对如何使用正则表达式有了初步了解之后，我们来看一下其它几个重要的元字符的使用方式。


代码
\s：用于匹配单个空格符，包括tab键和换行符；    
\S：用于匹配除单个空格符之外的所有字符；    
\d：用于匹配从0到9的数字；    
\w：用于匹配字母，数字或下划线字符；    
\W：用于匹配所有与\w不匹配的字符；    
. ：用于匹配除换行符之外的所有字符。    

（说明：我们可以把\s和\S以及\w和\W看作互为逆运算）
下面，我们就通过实例看一下如何在正则表达式中使用上述元字符。
/\s+/ 上述正则表达式可以用于匹配目标对象中的一个或多个空格字符。
/\d000/　如果我们手中有一份复杂的财务报表，那么我们可以通过上述正则表达式轻而易举的查找到所有总额达千元的款项。
除了我们以上所介绍的元字符之外，正则表达式中还具有另外一种较为独特的专用字符，即定位符。定位符用于规定匹配模式在目标对象中的出现位置。较为常用的定位符包括： “^”, “$”, “\b” 以及 “\B”。

代码
“^”定位符规定匹配模式必须出现在目标字符串的开头   
“$”定位符规定匹配模式必须出现在目标对象的结尾   
“\b”定位符规定匹配模式必须出现在目标字符串的开头或结尾的两个边界之一   
“\B”定位符则规定匹配对象必须位于目标字符串的开头和结尾两个边界之内，   
即匹配对象既不能作为目标字符串的开头，也不能作为目标字符串的结尾。   

同样，我们也可以把“^”和“$”以及“\b”和“\B”看作是互为逆运算的两组定位符。举例来说： /^hell/　因为上述正则表达式中包含“^”定位符，所以可以与目标对象中以 “hell”, “hello”或“hellhound”开头的字符串相匹配。 /ar$/　因为上述正则表达式中包含“$”定位符，所以可以与目标对象中以 “car”, “bar”或 “ar” 结尾的字符串相匹配。 /\bbom/　因为上述正则表达式模式以“\b”定位符开头，所以可以与目标对象中以 “bomb”, 或 “bom”开头的字符串相匹配。/man\b/　因为上述正则表达式模式以“\b”定位符结尾，所以可以与目标对象中以 “human”, “woman”或 “man”结尾的字符串相匹配。
为了能够方便用户更加灵活的设定匹配模式，正则表达式允许使用者在匹配模式中指定某一个范围而不局限于具体的字符。例如：

代码
/[A-Z]/　　上述正则表达式将会与从A到Z范围内任何一个大写字母相匹配。   
/[a-z]/　　上述正则表达式将会与从a到z范围内任何一个小写字母相匹配。    
/[0-9]/ 　上述正则表达式将会与从0到9范围内任何一个数字相匹配。    
/([a-z][A-Z][0-9])+/　上述正则表达式将会与任何由字母和数字组成的字符串，如 “aB0” 等相匹配。   

这里需要提醒用户注意的一点就是可以在正则表达式中使用 “()” 把字符串组合在一起。“()”符号包含的内容必须同时出现在目标对象中。因此，上述正则表达式将无法与诸如 “abc”等的字符串匹配，因为“abc”中的最后一个字符为字母而非数字。
如果我们希望在正则表达式中实现类似编程逻辑中的“或”运算，在多个不同的模式中任选一个进行匹配的话，可以使用管道符 “|”。例如：/to|too|2/　上述正则表达式将会与目标对象中的 “to”, “too”, 或 “2” 相匹配。
正则表达式中还有一个较为常用的运算符，即否定符 “[^]”。与我们前文所介绍的定位符 “^” 不同，否定符 “[^]”规定目标对象中不能存在模式中所规定的字符串。例如：/[^A-C]/　上述字符串将会与目标对象中除A，B，和C之外的任何字符相匹配。一般来说，当“^”出现在 “[]”内时就被视做否定运算符；而当“^”位于“[]”之外，或没有“[]”时，则应当被视做定位符。
最后，当用户需要在正则表达式的模式中加入元字符，并查找其匹配对象时，可以使用转义符“\”。例如：/Th\*/ 　上述正则表达式将会与目标对象中的“Th*”而非“The”等相匹配。
在构造正则表达式之后，就可以象数学表达式一样来求值，也就是说，可以从左至右并按照一个优先级顺序来求值。优先级如下：

代码
1．\ 转义符   
2．(), (?:), (?=), [] 圆括号和方括号   
3．*, +, ?, {n}, {n,}, {n,m} 限定符   
4．^, $, \anymetacharacter 位置和顺序   
5．|“或”操作   
