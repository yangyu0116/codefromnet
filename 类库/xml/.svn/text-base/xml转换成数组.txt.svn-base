class MyXml2Array {

    /**
    * XML parser handle
    *
    * @var        resource
    * @see        xml_parser_create()
    */
    var $parser;

    /**
    * source encoding
    *
    * @var        string
    */
    var $srcenc;

    /**
    * target encoding
    *
    * @var        string
    */
    var $dstenc;

    /**
    * the original struct
    *
    * @access    private
    * @var        array
    */
    var $_struct = array();


	var $rpltags=array(":"=>"_");
	var $validatetag;
    /**
    * Constructor
    *
    * @access        public
    * @param        mixed        [$srcenc] source encoding
    * @param        mixed        [$dstenc] target encoding
    * @return        void
    * @since
    */
    function MyXml2Array($validatetag=0,$srcenc = null, $dstenc = null) {
		$this->validatetag = $validatetag;
        $this->srcenc = $srcenc;
        $this->dstenc = $dstenc;

        // initialize the variable.
        $this->parser = null;
        $this->_struct = array();
    }

    /**
    * Free the resources
    *
    * @access        public
    * @return        void
    **/
    function free() {
        if (isset($this->parser) && is_resource($this->parser)) {
            xml_parser_free($this->parser);
            unset($this->parser);
        }
    }

    /**
    * Parses the XML file
    *
    * @access        public
    * @param        string        [$file] the XML file name
    * @return        void
    * @since
    */
    function parseFile($file) {
        $data = @file_get_contents($file) ;//or die("Can't open file $file for reading!");
        $this->parseString($data);
    }

    /**
    * Parses a string.
    *
    * @access        public
    * @param        string        [$data] XML data
    * @return        void
    */
    function parseString($data) {
		//show($data);
		//$this->srcenc="ISO-8859-1";
		//$this->dstenc="UTF-8";
        if ($this->srcenc === null) {
            $this->parser = @xml_parser_create() or die('Unable to create XML parser resource.');
        } else {
            $this->parser = @xml_parser_create($this->srcenc) or die('Unable to create XML parser resource with '. $this->srcenc .' encoding.');
        }

        if ($this->dstenc !== null) {
            @xml_parser_set_option($this->parser, XML_OPTION_TARGET_ENCODING, $this->dstenc) or die('Invalid target encoding');
        }
        xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, 0);    // lowercase tags
        xml_parser_set_option($this->parser, XML_OPTION_SKIP_WHITE, 1);        // skip empty tags
        if (!xml_parse_into_struct($this->parser, $data, &$this->_struct)) {
            $msg =  printf("XML error: %s at line %d",
                    xml_error_string(xml_get_error_code($this->parser)),
                    xml_get_current_line_number($this->parser)
            );
            $this->free();
            return $msg;
        }

        $this->_count = count($this->_struct);
        $this->free();
        return true;
    }

    /**
    * return the data struction
    *
    * @access        public
    * @return        array
    */
    function getTree() {
        $i = 0;
        $tree = array();
		//show($this->_struct);
        $tree = $this->addNode(
            $tree,
            $this->validatetagname($this->_struct[$i]['tag']),
            (isset($this->_struct[$i]['value'])) ? $this->_struct[$i]['value'] : '',
            (isset($this->_struct[$i]['attributes'])) ? $this->_struct[$i]['attributes'] : '',
            $this->getChild($i)
        );

        unset($this->_struct);
        return ($tree);
    }

    /**
    * recursion the children node data
    *
    * @access        public
    * @param        integer        [$i] the last struct index
    * @return        array
    */
    function getChild(&$i) {
        // contain node data
        $children = array();

        // loop
        while (++$i < $this->_count) {
            // node tag name

            $tagname = $this->_struct[$i]['tag'];

			$tagname = $this->validatetagname($tagname);

            $value = isset($this->_struct[$i]['value']) ? $this->_struct[$i]['value'] : '';
            $attributes = isset($this->_struct[$i]['attributes']) ? $this->_struct[$i]['attributes'] : '';

            switch ($this->_struct[$i]['type']) {
                case 'open':
                    // node has more children
                    $child = $this->getChild($i);
                    // append the children data to the current node
					//show($children);
					//show($tagname);
					//show($value);
                    $children = $this->addNode($children, $tagname, $value, $attributes, $child);
                    break;
                case 'complete':
                    // at end of current branch
                    $children = $this->addNode($children, $tagname, $value, $attributes);
                    break;
                case 'cdata':
                    // node has CDATA after one of it's children
                    $children['value'] .= $value;
                    break;
                case 'close':
                    // end of node, return collected data
                    return $children;
                    break;
            }

        }
        //return $children;
    }

    /**
    * Appends some values to an array
    *
    * @access        public
    * @param        array        [$target]
    * @param        string        [$key]
    * @param        string        [$value]
    * @param        array        [$attributes]
    * @param        array        [$inner] the children
    * @return        void
    * @since
    */
	// tree, keyname	, 值	,属性	，subtree
    function addNode($target, $key, $value = '', $attributes = '', $child = '') {
		//值 或者 属性 或者 数组
        if (!isset($target[$key]['value']) && !isset($target[$key][0]) &&  !isset($target[$key])) {
			//if($key=='user')show(time());
            if ($child != '') {
                $target[$key] = $child;
            }
            if ($attributes != '') {
                foreach ($attributes as $k => $v) {
					//$k = $this->validatetagname($k);
                    $target[$key][$k] = $v;
                }
            }

            if(!empty($value))
				$target[$key]['value'] = $value;

        } else {
            if (!isset($target[$key][0])) {
                // is string or other
                $oldvalue = $target[$key];
                $target[$key] = array();
                $target[$key][0] = $oldvalue;
                $index = 1;
            } else {
                // is array
                $index = count($target[$key]);
            }

            if ($child != '') {
                $target[$key][$index] = $child;
            }

            if ($attributes != '') {
                foreach ($attributes as $k => $v) {
					//$k = $this->validatetagname($k);
                    $target[$key][$index][$k] = $v;
                }
            }

			if($value)
				$target[$key][$index]['value'] = $value;

        }
        return $target;
    }

	//修正xml tagname
	function validatetagname($tagname) {
		switch($this->validatetag){
			case 0:

				break;
			case 1:	//修剪
				foreach($this->rpltags as $from=>$to){
					$pos=strpos($tagname,$from);
					if($pos)$tagname=substr($tagname,$pos+1);
				}
				break;
			case 2:	//替换
				foreach($this->rpltags as $from=>$to)
					$tagname=str_replace($from,$to,$tagname);
				break;
		}

		Return $tagname;

	}

}

function url_exists($url) {
    // Version 4.x supported
    $handle  = curl_init($url);
    if (false === $handle)
    {
        return false;
    }
    curl_setopt($handle, CURLOPT_HEADER, false);
    curl_setopt($handle, CURLOPT_FAILONERROR, true);  // this works
    curl_setopt($handle, CURLOPT_HTTPHEADER, Array("User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.15) Gecko/20080623 Firefox/2.0.0.15") ); // request as if Firefox
    curl_setopt($handle, CURLOPT_NOBODY, true);
    curl_setopt($handle, CURLOPT_RETURNTRANSFER, false);
    $connectable = curl_exec($handle);
    curl_close($handle);
    return $connectable;
}
function xml2array($xml){
    $array = array();
     //建立一个 XML 解析器
    $parser = xml_parser_create();
    //xml_parser_set_option -- 为指定 XML 解析进行选项设置
    xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,1);
    //xml_parse_into_struct -- 将 XML 数据解析到数组$values中
    xml_parse_into_struct($parser,$xml,$array);
    //xml_parser_free -- 释放指定的 XML 解析器
    xml_parser_free($parser);

    foreach ($array as $val){

    }
}